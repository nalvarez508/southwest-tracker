import base64
import sys
from io import BytesIO
import PIL.Image, PIL.ImageTk, PIL.ImageFile
import requests
from threading import Thread
import time

import tkinter as tk
from tkinter import ttk
from tkinter import *
import SouthwestNonstop_progress_nomain as swa

class GUI_Elements:
  def __init__(self):
    self.title = "Southwest Flight Schedules"
    self.airports = []
    self.origin = None
    self.destination = None

    self.height = 80
    self.width = 150
    self.photo_city1 = None
    self.photo_city2 = None
  
  def setCityPhoto(self, cityNo, data):
    if cityNo == 1:
      self.photo_city1 = data
    elif cityNo == 2:
      self.photo_city2 = data
  
  def getCityPhoto(self, cityNo):
    if cityNo == 1:
      return self.photo_city1
    elif cityNo == 2:
      return self.photo_city2
  
  def setOrigin(self, o):
    self.origin = o
  def setDestination(self, d):
    self.destination = d
  
def main():
  PIL.ImageFile.LOAD_TRUNCATED_IMAGES = True
  schedule = swa.Schedule()
  elements = GUI_Elements()


  def b64ImageTest():
    return (('''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'''))


  def loadImage(c, no):
    try:
      #print("What's popping" + c)
      fh = BytesIO(base64.b64decode(schedule.returnCityPhoto(c)))
      img = PIL.Image.open(fh, mode='r')
      render = PIL.ImageTk.PhotoImage(image=img)
      elements.setCityPhoto(no, render)
    except TclError:
      pass
  
  def callbackOrigin(eventObject):
    #print(eventObject.widget.get())
    elements.setOrigin(eventObject.widget.get())
    #t1 = Thread(target=loadImage, args=[eventObject.widget.get(), 1])
    loadImage(eventObject.widget.get(), 1)
    #t1.daemon = True
    #t1.start()
    pic_origin.create_image(elements.width/2, elements.height/2, image=elements.getCityPhoto(1), anchor=NW)

  
  def callbackDestination(eventObject):
    elements.setDestination(eventObject.widget.get())
    #t1 = Thread(target=loadImage, args=[eventObject.widget.get(), 1])
    loadImage(eventObject.widget.get(), 2)
    #t1.daemon = True
    #t1.start()
    pic_destination.create_image(elements.width/2, elements.height/2, image=elements.getCityPhoto(2), anchor=NW)
  
  try:
    #global direct_enabled
    try:
      for arg in sys.argv:
        if 'direct' == arg:
          schedule.direct_enabled = True
        continue
    except IndexError:
      pass
    mode = sys.argv[1]
    if mode == 'all':
      #schedule.setSearchType('all')
      pass
      #while search_date < end_date: # Up to last booking day
      '''days = end_date-search_date
      for i in progressbar(range(days.days), redirect_stdout=True):
        searchAndPrint()'''
    elif mode == 'interval':
      #schedule.setSearchType('interval')
      pass
      '''datesInput()
      days = return_date-search_date
      #while search_date <= return_date: # Up to return day
      for i in progressbar(range(days.days), redirect_stdout=True):
        searchAndPrint()'''
    elif mode == 'direct':
      '''datesInput()
      for d in progressbar(range(0,2), redirect_stdout=True): # Only two days
        searchAndPrint(d)'''
      pass
  except IndexError:
    '''datesInput()
    for d in progressbar(range(0,2), redirect_stdout=True): # Only two days
      searchAndPrint(d)'''
    pass
  #ttk.Combobox.
  root = Tk()
  root.geometry('1000x600')
  root.title('Southwest Flight Schedules')
  Label(root, text="Southwest Flight Schedules", font=('verdana', 24, 'normal')).pack(side='top')#place(x=450,y=10)

  IATA_origin = ttk.Combobox(root, values=list(schedule.returnAirportInfo().keys()), width=30)
  IATA_origin.place(x=40, y=200)
  IATA_origin.current(0)
  #print(IATA_origin.get())
  IATA_origin.bind("<<ComboboxSelected>>", callbackOrigin)
  IATA_destination = ttk.Combobox(root, values=list(schedule.returnAirportInfo().keys()), width=30)
  IATA_destination.place(x=650,y=200)
  IATA_destination.current(0)
  IATA_destination.bind("<<ComboboxSelected>>", callbackDestination)

  pic_origin = Canvas(root, height=elements.height, width=elements.width)#.place(x=40, y=150)
  pic_destination = Canvas(root, height=elements.height, width=elements.width)#.place(x=676, y=150)
  pic_origin.pack(expand=YES, fill=BOTH)
  #pic_origin.place(x=40, y=150)
  #pic_destination.place(x=676, y=200)
  pic_destination.pack(expand=YES, fill=BOTH)
  loadImage(IATA_origin.get(), 1)
  loadImage(IATA_destination.get(), 2)
  pic_origin.create_image(elements.width/2, elements.height/2, image=elements.getCityPhoto(1), anchor=NW)
  pic_destination.create_image(elements.height/2, elements.width/2, image=elements.getCityPhoto(2), anchor=NW)
  
  #Label(root, image=elements.getCityPhoto(1)).pack()
  #city1.pack()
  IATA_origin.tkraise()
  IATA_destination.tkraise()
  root.mainloop()
  #loadImage("Reno, NV")

  def onExit():
    root.destroy()
    sys.exit()

  root.protocol('WM_WINDOW_DELETE', onExit)
  root.lift()
  root.mainloop()

if __name__ == "__main__":
  try:
    main()
  except ConnectionResetError:
    exit()